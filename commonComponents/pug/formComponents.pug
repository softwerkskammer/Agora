mixin text(name, label, value, tooltip, placeholder, readonly)
  .form-group
    if (readonly)
      +hidden(name, value)
    +controlLabel(name, label, tooltip)
    input.form-control.trim-text(id=name, type='text', name=name, value=value, placeholder=placeholder, disabled=readonly)

mixin textWithTags(name, label, value, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(multiple, id=name, name=name, data-tags=true, data-token-separators=[',', ', '])
      each tag in tags
        option(selected = value.indexOf(tag) > -1) #{tag}

mixin singleselect(name, label, value, placeholder, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(id=name, name=name, data-placeholder=placeholder)
      option(value='') #{' '}
      each tag in tags
        option(value = tag.iso, selected = value && value.indexOf(tag.iso) === 0) #{tag.name}

mixin multiselect(name, label, value, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(multiple, id=name, name=name)
      each tag in tags
        option(selected = value.indexOf(tag) > -1) #{tag}

mixin editableMultiselect(name, label, value, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(multiple, id=name, name=name, data-tags=true)
      each tag in tags
        option(selected = value.indexOf(tag) > -1) #{tag}

mixin currency(name, label, value, tooltip, placeholder, readonly)
  .form-group
    if (readonly)
      +hidden(name, value)
    +controlLabel(name, label, tooltip)
    input.form-control.currency(id=name, type='text', name=name, placeholder=placeholder, disabled=readonly, data-currency-symbol=' â‚¬', data-currency-symbol-placement='s', data-decimal-character=t('general.separator'), data-digit-group-separator='')

mixin textareaPure(name, label, value, placeholder)
  +textareaInternal('form-control', '4', name, label, value, null, placeholder)

mixin textarea(name, label, value, tooltip, placeholder)
  +textareaInternal('md-textarea', '7', name, label, value, tooltip, placeholder)

mixin hightextarea(name, label, value, tooltip, placeholder)
  +textareaInternal('md-textarea', '15', name, label, value, tooltip, placeholder)

mixin checkboxWithDescription(name, label, checked, description, optionalValue)
  .checkbox
    label
      input(type='checkbox', name=name, value=optionalValue, checked=(checked ? 'true' : undefined))
      -if (description)
        span.popover-highlight(rel='tooltip-in-body', data-content=description) #{label}
      -else
        | #{label}

mixin checkbox(name, label, checked, optionalValue)
  +checkboxWithDescription(name, label, checked, undefined, optionalValue)

mixin groupCheckboxes(checkboxName, regionalgroups, themegroups)
  .row
    .col-md-6
      +controlLabel(t('groups.regional'), t('groups.regional'))
      .form-group
        each markedGroup in regionalgroups
          +checkboxWithDescription(checkboxName, markedGroup.group.longName, markedGroup.selected, markedGroup.group.descriptionHTMLFiltered('img'), markedGroup.group.id)
    .col-md-6
      +controlLabel(t('groups.themed'), t('groups.themed'))
      .form-group
        each markedGroup in themegroups
          +checkboxWithDescription(checkboxName, markedGroup.group.longName, markedGroup.selected, markedGroup.group.descriptionHTMLFiltered('img'), markedGroup.group.id)

mixin submitButtons(submitTextToken)
  .btn-group.pull-right
    a.btn.btn-default(href='javascript:history.back()', type='cancel') #{t('general.back')}
    button.btn.btn-primary(type='submit') #{t(submitTextToken)}

mixin memberSubmitButtons(submitText)
  .btn-group.pull-right
    if (accessrights.isRegistered())
      a.btn.btn-default(href='javascript:history.back()', type='cancel') #{t('general.back')}
    else
      a.btn.btn-danger(href='/auth/logout', type='cancel') #{t('members.cancel')}
    button.btn.btn-primary(type='submit') #{submitText}
    
mixin hidden(name, value)
  input(type='hidden', name=name, value=value)

mixin date(name, label, value, tooltip)
  .form-group
    +controlLabel(name, label, tooltip)
    input.form-control.datepicker(id=name, type='text', name=name, value=value)

mixin time(name, value)
  .form-group
    label.control-label(for=name) &nbsp;
    input.form-control.timepicker(id=name, type='text', name=name, value=value)

mixin colorPicker(name, value)
  .form-group
    +controlLabel(name, t('colors.color'))
    .input-group.c-picker
      span.input-group-addon: i
      input.form-control(id=name, type='text', name=name, value=value)

mixin twitter(name, label, value)
  .form-group
    +controlLabel(name, label)
    .input-group
      span.input-group-addon @
      input.form-control(id=name, type='text', name=name, value=value)

mixin csrf
  +hidden('_csrf', csrf_token)

mixin controlLabel(name, label, tooltip)
  label.control-label(for=name)
    -if (tooltip)
      span.tooltiplabel(data-original-title=tooltip) #{label}:&nbsp;
        i.fa.fa-question-circle
    -else
      | #{label}:

mixin textareaInternal(classname, rowCount, name, label, value, tooltip, placeholder)
  .form-group
    +controlLabel(name, label, tooltip)
    textarea(class=classname, id=name, rows=rowCount, type='text', name=name, placeholder=placeholder) #{value}

mixin reallyDeleteModalPost(header, options, extraclasses)
  +reallyDeleteModalOnly(header, options)
  +reallyDeleteButtonOnly(header, options, extraclasses)

mixin reallyDeleteModalOnly(header, options)
  -var theID = 'reallyDelete' + header.replace('\.', '')
  .modal.fade(id=theID, tabindex='-1')
    .modal-dialog
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-hidden='true') &times;
          h3 #{t(header)}
        .modal-body
          p #{t('general.are_you_sure')}
          form(action=options.url, role='form', method='post')
            +csrf
            each val, param in options.params
              +hidden(param, val)
            .btn-group
              button.btn.btn-default(type='cancel', data-dismiss='modal', aria-hidden='true') #{t('general.No')}
              button.btn.btn-primary(type='submit')
                i.fa.fa-trash-o.fa-fw &nbsp;
                | #{t('general.delete')}

mixin reallyDeleteButtonOnly(header, options, extraclasses)
  -var theID = 'reallyDelete' + header.replace('\.', '')
  span.btn.btn-danger(data-toggle='modal', data-target='#' + theID, class=extraclasses)
    i.fa.fa-trash-o.fa-fw
    if (extraclasses)
      | &nbsp; #{t('general.delete')}
