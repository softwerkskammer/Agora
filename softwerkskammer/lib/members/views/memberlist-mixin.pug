mixin memberlistHeading(firstPart, count)
  | #{firstPart}#{t('general.members_interval', { postProcess: 'interval', count: count })}.
  
mixin memberlist(members, organizers)
  if (accessrights.isRegistered())
    dl.dl-horizontal
      for member in members
        dt: .member
          +linkedMember(member.nickname())
          if (member.hasImage())
            | &nbsp; <a href='#' rel='tooltip' data-content=#{member.nickname()} title='<div style="height: 128px;"><img src=#{member.avatarUrl(128)} width="128" height="128"/></div>' >
            img.hidden-print(src=member.inlineAvatar(), width='16', height='16')
            | </a>
        dd #{member.firstname()} #{member.lastname()}
          if member.location()
            |, #{member.location()}
          | &nbsp;
          if (organizers && organizers.indexOf(member.id()) > -1)
            a(href='/mailsender/contactMember/' + encodeURIComponent(member.nickname()), title=t('mailsender.write')): span.label(style='background-color: #DF5353') #{t('groups.contact')}

mixin linkedMember(nickname)
  a(href='/members/' + encodeURIComponent(nickname)) #{nickname}

mixin tagCloud(members, startcolor)
  script.
    $(document).ready(function() {
      $('#tag-cloud').jQCloud(
        !{JSON.stringify(tagclouddata(members))}, 
      {
        afterCloudRender: interestify,
        shape: 'rectangular',
        steps: 7,
        autoResize: true,
        removeOverflowing: false,
        fontSize: function(width, height, weight) {
          var 
            max = Math.min(width * 0.1, 60), 
            min = Math.min(width * 0.02, 10);
          return Math.round(min + (max - min) * 1.0 / (this.options.steps-1) * (weight - 1)) + 'px';
        },
        colors: function(weight) {
          var
            start = tinycolor('#{startcolor}'),
            seventy = tinycolor(start.toHexString()).desaturate(30).lighten(10),
            hundred = tinycolor(seventy.toHexString()).desaturate(30).lighten(10),
            gradient = tinygradient([
              {color: start, pos: 0},
              {color: seventy, pos: 0.8},
              {color: hundred, pos: 1}
            ]);
          return gradient.hsv(this.options.steps, true).map(function(tinycolor) { return tinycolor.toHexString(); })[this.options.steps - weight];
        }
      });
    });
