extends ../../../views/layout
include ../../../../softwerkskammer/lib/members/views/memberlist-mixin
include ../../../../softwerkskammer/views/format-mixin
include ../../../../softwerkskammer/views/formComponents
include ../../../../softwerkskammer/views/dataTables-mixin
include ajax

mixin localdate(momentOrNull)
  | #{momentOrNull ? momentOrNull.locale('de').format('L') : '-'}

mixin fromWaitinglistToParticipant(roomType, nickname, duration)
  -var roomURI = encodeURIComponent(roomType)
  +ajaxButton(nickname, '/activities/fromWaitinglistToParticipant/' + roomURI + '/' + encodeURIComponent(nickname) + '/' + duration, roomURI + '-WLP', 'Teilnehmen lassen…')

mixin newDuration(roomType, nickname, currentSelection)
  form#activityform(action='/activities/newDuration', method='post')
    +csrf
    +hidden('roomType', roomType)
    +hidden('nickname', nickname)
    select.form-control(name='duration', style='height: inherit;')
      option(value='0') #{' '}
      option(value='2') saturday evening
      option(value='3') sunday morning
      option(value='4') sunday evening
      option(value='5') monday morning
    button.btn.btn-default.btn-xs(type='submit') Ändern

mixin newResource(roomType, nickname)
  form#activityform(action='/activities/newResource', method='post')
    +csrf
    +hidden('roomType', roomType)
    +hidden('nickname', nickname)
    select.form-control(name='newResourceName', style='height: inherit;')
      option(value='0') #{' '}
      option(value='single') single
      option(value='bed_in_double') bed in double
      option(value='bed_in_junior') bed in junior
      option(value='junior') junior
    button.btn.btn-default.btn-xs(type='submit') Ändern

mixin newWaitinglist(currentRoomTypes, nickname)
  form#activityform(action='/activities/newWaitinglist', method='post')
    +csrf
    +hidden('nickname', nickname)
    for roomType in roomOptionIds
      input(type='checkbox', name='waitinglistOptions_' + encodeURIComponent(nickname), value=roomType, checked=(currentRoomTypes.indexOf(roomType) > -1) )
      |  #{roomType} &nbsp;
    button.btn.btn-default.btn-xs(type='submit') Ändern

mixin unpairedParticipantDropdown(roomType, participant1Nick, unpairedParticipants)
  form#unpairedParticipantForm(action='/activities/newParticipantPair', method='post')
    +csrf
    +hidden('roomType', roomType)
    +hidden('participant1', participant1Nick)
    select.form-control(name='participant2', style='height: inherit;')
      option(value='0') #{' '}
      for participant2 in unpairedParticipants
        -var p2nick = participant2.nickname()
        if participant1Nick !== p2nick
          option(value=p2nick) #{participant2.displayName()} (#{p2nick}) - [Wunsch: #{participant2.subscriber.currentParticipation().roommate()}]
    button.btn.btn-default.btn-xs(type='submit') Zufügen

mixin removePair(roomType, pair)
  form#removePairForm(action='/activities/removeParticipantPair', method='post')
    +csrf
    +hidden('roomType', roomType)
    +hidden('participant1', pair.participant1.nickname())
    +hidden('participant2', pair.participant2.nickname())
    button.btn.btn-default.btn-xs(type='submit') Entfernen

mixin removeParticipantWithModal(roomType, participantNick)
  -var theID = 'reallyRemoveParticipant' + participantNick.replace(/\s/g, '').replace(/@/g, 'AT').replace(/\./g, 'DOT')
  .modal.fade(id=theID, tabindex='-1')
    .modal-dialog
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-hidden='true') &times;
          h3 Remove Participant
        .modal-body
          p #{t('general.are_you_sure')}
          p This will remove #{participantNick} from the list of participants.
          form#removeParticipantForm(action='/activities/removeParticipant', method='post')
            .btn-group
              button.btn.btn-default(type='cancel', data-dismiss='modal', aria-hidden='true') #{t('general.no')}
              +csrf
              +hidden('roomType', roomType)
              +hidden('participant', participantNick)
              button.btn.btn-danger(type='submit')
                i.fa.fa-trash-o.fa-fw &nbsp;
                | #{t('general.delete')}
  button.btn.btn-danger(data-toggle='modal', data-target='#' + theID): i.fa.fa-trash-o.fa-fw

mixin removeWaitinglistMemberWithModal(roomType, waitinglistNick)
  -var theID = 'reallyRemoveWaitinglistMember' + waitinglistNick.replace(/\s/g, '').replace(/@/g, 'AT').replace(/\./g, 'DOT')
  .modal.fade(id=theID, tabindex='-1')
    .modal-dialog
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-hidden='true') &times;
          h3 Remove Waitinglist Member
        .modal-body
          p #{t('general.are_you_sure')}
          p This will remove #{waitinglistNick} from the waitinglist.
          form#removeWaitinglistMemberForm(action='/activities/removeWaitinglistMember', method='post')
            .btn-group
              button.btn.btn-default(type='cancel', data-dismiss='modal', aria-hidden='true') #{t('general.no')}
              +csrf
              +hidden('roomType', roomType)
              +hidden('waitinglistMember', waitinglistNick)
              button.btn.btn-danger(type='submit')
                i.fa.fa-trash-o.fa-fw &nbsp;
                | #{t('general.delete')}
  button.btn.btn-danger(data-toggle='modal', data-target='#' + theID): i.fa.fa-trash-o.fa-fw

block scripts
  +dataTableImport
  +ajaxFunction
  +dataTable('.addontable', '[ 4, "asc" ]', '[{targets: [0], type: "date-eu"}]')
  +dataTable('.membertable', '[ 0, "asc" ]', '[{targets: 0, type: "date-eu"}]')
  +dataTable('.unsortedtable', '[]', '[]')
  +dataTable('.addressestable', '[ 1, "asc" ]', '[]')
block title
  | #{title} - Verwaltung
block content
  .row
    .col-md-12
      .page-header
        h2 #{title} - Verwaltung
          a.btn.pull-right.btn-default(href='/registration') Zurück
    ul.nav.nav-tabs
      li: a(href='#overview', data-toggle='tab') Übersicht
      li.active: a(href='#addons', data-toggle='tab') Teilnehmer
      li: a(href='#main', data-toggle='tab') Teilnehmer nach Zimmern
      li: a(href='#bedroomPairing', data-toggle='tab') Zimmerzuordnungen
      li: a(href='#waitinglist', data-toggle='tab') Warteliste
      li: a(href='#waitinglistByRoom', data-toggle='tab') Warteliste nach Zimmern
      li: a(href='#tshirtSizes', data-toggle='tab') T-Shirt-Bestellungen
      li: a(href='#remarks', data-toggle='tab') Zusatzinformationen
      li: a(href='#addresses', data-toggle='tab') Adressen
  .row
    .col-md-12
      .tab-content
        .tab-pane#overview
          h4 Bettenbelegung
          .panel
            -var totalParticipants = 0
            -var totalFreeSpots = 0
            -var totalWaitingOptions = 0
            -var totalWaitingMembers = waitinglistLines.length
            table.table.table-condensed.table-hover.table-striped.unsortedtable
              thead
                tr
                  th Option
                  th Teilnehmer
                  th Diversity-Teilnehmer
                  th Freie Plätze
                  th Wartende
                  th Diversity-Wartende
              tbody
                for roomType in roomOptionIds
                  -var participants = registrationReadModel.participantCountFor(roomType)
                  -var quota = socratesReadModel.quotaFor(roomType)
                  -var waitingOptions = registrationReadModel.waitinglistParticipantCountFor(roomType)
                  -var freeSpots = quota === undefined ? undefined : quota - participants
                  -var participantDiversity = participantLinesOf[roomType].filter(line => line.addon.ladiesTShirt() || !line.subscriber.livesInGermany()).length
                  -var waitingDiversity = waitinglistLinesOf[roomType].filter(line => line.addon.ladiesTShirt() || !line.subscriber.livesInGermany()).length
                  -totalParticipants += participants
                  -totalFreeSpots = freeSpots ? totalFreeSpots + freeSpots : totalFreeSpots
                  -totalWaitingOptions += waitingOptions
                  tr
                    td #{roomType}
                    td #{participants} von #{quota === undefined ? 'unbegrenzt' : quota}
                    td #{participantDiversity}
                    td #{freeSpots}
                    td #{waitingOptions}
                    td #{waitingDiversity}
                tr
                  td <b>Summe</b>
                  td <b>#{totalParticipants}</b>
                  td <b>#{addonLines.filter(line => line.addon.ladiesTShirt() || !line.subscriber.livesInGermany()).length}</b>
                  td <b>#{totalFreeSpots}</b>
                  td <b>Rooms: #{totalWaitingOptions} / Persons: #{totalWaitingMembers}</b>
                  td <b>#{waitinglistLines.filter(line => line.addon.ladiesTShirt() || !line.subscriber.livesInGermany()).length}</b>

            hr
            h4 Aufenthaltsdauer
            .panel
              table.table.table-condensed.table-hover.table-striped.unsortedtable
                thead
                  tr
                    th Option
                    th Count
                tbody
                  for duration in durations
                    tr
                      td #{duration.duration}
                      td #{duration.count} (total: #{duration.total})

        .tab-pane#main
          each roomType in roomOptionIds
            -var participantLines = participantLinesOf[roomType]
            -var participantCount = registrationReadModel.participantCountFor(roomType)
            -var quota = socratesReadModel.quotaFor(roomType)
            h4 #{roomType} (#{participantCount} von #{quota === undefined ? 'unbegrenzt' : quota})
            .panel
              table.table.table-condensed.table-hover.table-striped.membertable
                thead
                  tr
                    th Registriert
                    th Nickname
                    th Vorname
                    th Nachname
                    th bleibt bis
                    th ändern in
                    th room type
                    th umbuchen in
                    th entfernen
                tbody
                  for line in participantLines
                    tr
                      td #{registrationReadModel.joinedSoCraTesAt(line.member.id()).locale('de').format('L')}
                      td: +linkedMember(line.member.nickname())
                      td #{line.member.firstname()}
                      td #{line.member.lastname()}
                      td #{registrationReadModel.durationFor(line.member.id())}
                      td: +newDuration(roomType, line.member.nickname(), registrationReadModel.participantEventFor(line.member.id()).duration)
                      td #{roomType}
                      td: +newResource(roomType, line.member.nickname())
                      td: +removeParticipantWithModal(roomType, line.member.nickname())
            hr
        .tab-pane.active#addons
          h4 Alle Teilnehmer
          .panel
            table.table.table-condensed.table-hover.table-striped.addontable
              thead
                tr
                  th Registriert
                  th Nickname
                  th Vorname
                  th Nachname
                  th eMail
                  th bleibt bis
                  th ändern in
                  th room type
                  th umbuchen in
              tbody
                for line in addonLines
                  tr
                    -var event = registrationReadModel.participantEventFor(line.member.id())
                    td #{formatDate(event.joinedSoCraTes)}
                    td: +linkedMember(line.member.nickname())
                    td #{line.member.firstname()}
                    td #{line.member.lastname()}
                    td #{line.member.email()}
                    td #{registrationReadModel.durationFor(line.member.id())}
                    td: +newDuration(event.roomType, line.member.nickname(), registrationReadModel.participantEventFor(line.member.id()).duration)
                    td #{event.roomType}
                    td: +newResource(event.roomType, line.member.nickname())

        .tab-pane#waitinglistByRoom
          each roomType in roomOptionIds
            -var lines = waitinglistLinesOf[roomType]
            h4 Wartende in #{roomType} (#{lines.length})
            .panel
              table.table.table-condensed.table-hover.table-striped.membertable
                thead
                  tr
                    th Eingetragen
                    th Nickname
                    th Vorname
                    th Nachname
                    th Ort/Region
                    th Gewählte Zimmer
                    th Diversity?
                    th Übernehmen
                tbody
                  for line in lines
                    tr
                      td #{formatDateTime(registrationReadModel.joinedWaitinglistAt(line.member.id()))}
                      td: +linkedMember(line.member.nickname())
                      td #{line.member.firstname()}
                      td #{line.member.lastname()}
                      td #{line.member.location()}
                      td #{formatList(registrationReadModel.roomTypesOf(line.member.id()))}
                      td #{line.addon.ladiesTShirt() || !line.subscriber.livesInGermany() ? 'yes' : ''}
                      td: +fromWaitinglistToParticipant(roomType, line.member.nickname(), registrationReadModel.waitinglistParticipantEventFor(line.member.id()).duration)
            hr
        .tab-pane#waitinglist
          h4 Wartende (#{waitinglistLines.length})
          .panel
            table.table.table-condensed.table-hover.table-striped.membertable
              thead
                tr
                  th Eingetragen
                  th Nickname
                  th Vorname
                  th Nachname
                  th Ort/Region
                  th Zimmer mit
                  th ändern in
                  th entfernen
              tbody
                for line in waitinglistLines
                  tr
                    td #{formatDateTime(registrationReadModel.joinedWaitinglistAt(line.member.id()))}
                    td: +linkedMember(line.member.nickname())
                    td #{line.member.firstname()}
                    td #{line.member.lastname()}
                    td #{line.member.location()}
                    td #{line.participation.roommate()}
                    td: +newWaitinglist(registrationReadModel.roomTypesOf(line.member.id()), line.member.nickname())
                    td: +removeWaitinglistMemberWithModal(roomType, line.member.nickname())

            hr

        .tab-pane#bedroomPairing
          for roomType in ['bed_in_double', 'bed_in_junior']
            h4 Zuordnung der Belegungen für #{roomType}
            .panel
              table.table.table-condensed.table-hover.table-striped.unsortedtable
                thead
                  tr
                    th 1. Teilnehmer
                    th 2. Teilnehmer
                    th Zuordnung entfernen
                tbody
                  for pair in rooms[roomType].roomPairs
                    tr
                      td #{pair.participant1.displayName()} (#{pair.participant1.nickname()}) - [Wunsch: #{pair.participant1.subscriber.currentParticipation().roommate()}]
                      td #{pair.participant2.displayName()} (#{pair.participant2.nickname()}) - [Wunsch: #{pair.participant2.subscriber.currentParticipation().roommate()}]
                      td: +removePair(roomType, pair)
                  for participant in rooms[roomType].unpairedParticipants
                    tr
                      td #{participant.displayName()} (#{participant.nickname()}) - [Wunsch: #{participant.subscriber.currentParticipation().roommate()}]
                      td: +unpairedParticipantDropdown(roomType, participant.nickname(), rooms[roomType].unpairedParticipants)
                      td #{' '}

        .tab-pane#tshirtSizes
          h4 Verteilungen der T-Shirt-Größen
          .panel
            -var totalShirtCount = 0
            -var totalShirtCountPlusBuffer = 0
            table.table.table-condensed.table-hover.table-striped.unsortedtable
              thead
                tr
                  th T-Shirt-Größe
                  th Anzahl
                  th Anzahl + 10%
              tbody
                for tshirtsize in tshirtsizes
                  -var count = tshirtsize.count
                  -var countPlusBuffer = Math.ceil(tshirtsize.count * 1.1)
                  -totalShirtCount += count
                  -totalShirtCountPlusBuffer += countPlusBuffer
                  tr
                    td #{tshirtsize.size}
                    td #{count}
                    td #{countPlusBuffer}
            hr
            p Gesamtzahl T-Shirts: #{totalShirtCount} (Plus 10 %: #{totalShirtCountPlusBuffer})
          hr
        .tab-pane#remarks
          h4 Remarks
          .panel
            table.table.table-condensed.table-hover.table-striped.unsortedtable
              thead
                tr
                  th Nickname
                  th Vorname
                  th Nachname
                  th Bemerkung
              tbody
                for line in addonLines
                  tr
                    td: +linkedMember(line.member.nickname())
                    td #{line.member.firstname()}
                    td #{line.member.lastname()}
                    td #{line.addon.remarks()}
          hr
        .tab-pane#addresses
          h4 Adressen der Teilnehmer
          .panel
            table.table.table-condensed.table-hover.table-striped.addressestable
              thead
                tr
                  th Nickname
                  th Vorname
                  th Nachname
                  th E-Mail
                  th Heimatadresse
                  th Rechnungsadresse
                  th Zimmerart
              tbody
                for line in addonLines
                  tr
                    td: +linkedMember(line.member.nickname())
                    td #{line.member.firstname()}
                    td #{line.member.lastname()}
                    td #{line.member.email()}
                    td: +formatAsLines(line.addon.homeAddressLines())
                    td: +formatAsLines(line.addon.billingAddressLines())
                    td #{registrationReadModel.participantEventFor(line.member.id()).roomType}

          h4 Adressen der Wartenden
          .panel
            table.table.table-condensed.table-hover.table-striped.addressestable
              thead
                tr
                  th Nickname
                  th Vorname
                  th Nachname
                  th E-Mail
                  th T-Shirt
                  th Zimmer mit
                  th Heimatadresse
                  th Rechnungsadresse
                  th Zimmerarten
              tbody
                for line in waitinglistLines
                  tr
                    td: +linkedMember(line.member.nickname())
                    td #{line.member.firstname()}
                    td #{line.member.lastname()}
                    td #{line.member.email()}
                    td #{line.addon.tShirtSize()}
                    td #{line.participation.roommate()}
                    td: +formatAsLines(line.addon.homeAddressLines())
                    td: +formatAsLines(line.addon.billingAddressLines())
                    td #{formatList(registrationReadModel.waitinglistParticipantEventFor(line.member.id()).desiredRoomTypes)}
          hr
